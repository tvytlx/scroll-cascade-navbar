var CascadeNavbar = (function (exports, vue) {
    'use strict';

    const isClient = typeof window !== 'undefined';

    const isString = val => typeof val === 'string';

    const noop = () => {};
    /**
     * Call onUnmounted() if it's inside a component lifecycle, if not, do nothing
     *
     * @param fn
     */


    function tryOnUnmounted(fn) {
      if (vue.getCurrentInstance()) vue.onUnmounted(fn);
    }

    const defaultWindow = isClient ? window : undefined;

    function useEventListener(...args) {
      let target;
      let event;
      let listener;
      let options;

      if (isString(args[0])) {
        [event, listener, options] = args;
        target = defaultWindow;
      } else {
        [target, event, listener, options] = args;
      }

      if (!target) return noop;
      let cleanup = noop;
      const stopWatch = vue.watch(() => vue.unref(target), el => {
        cleanup();
        if (!el) return;
        el.addEventListener(event, listener, options);

        cleanup = () => {
          el.removeEventListener(event, listener, options);
          cleanup = noop;
        };
      }, {
        immediate: true,
        flush: 'post'
      });

      const stop = () => {
        stopWatch();
        cleanup();
      };

      tryOnUnmounted(stop);
      return stop;
    }

    var SwipeDirection;

    (function (SwipeDirection) {
      SwipeDirection["UP"] = "UP";
      SwipeDirection["RIGHT"] = "RIGHT";
      SwipeDirection["DOWN"] = "DOWN";
      SwipeDirection["LEFT"] = "LEFT";
      SwipeDirection["NONE"] = "NONE";
    })(SwipeDirection || (SwipeDirection = {}));
    /**
     * Reactive window scroll.
     *
     * @see https://vueuse.org/useWindowScroll
     * @param options
     */


    function useWindowScroll({
      window = defaultWindow
    } = {}) {
      if (!window) {
        return {
          x: vue.ref(0),
          y: vue.ref(0)
        };
      }

      const x = vue.ref(window.pageXOffset);
      const y = vue.ref(window.pageYOffset);
      useEventListener('scroll', () => {
        x.value = window.pageXOffset;
        y.value = window.pageYOffset;
      }, {
        capture: false,
        passive: true
      });
      return {
        x,
        y
      };
    }

    var script = {
      name: "CascadeNavbar",
      props: {
        bannerHeight: {
          type: Number,
          default: 25,
        },
        navbarHeight: {
          type: Number,
          default: 50,
        },
        middleHeight: {
          type: Number,
          default: 250,
        },
        bannerScrollAmount: {
          type: Number,
          default: 200,
        },
      },
      setup(props, context) {
        const middleHeight = props.middleHeight;
        const banner = vue.ref(null);
        vue.ref(null);
        vue.ref(0);
        const { y: windowY } = useWindowScroll();
        // there is three state
        const state = {
          start: {
            navbar: {
              display: "block",
              position: "fixed",
              top: 0,
            },
            banner: {
              display: "block",
              position: "static",
            },
          },
          middle: {
            navbar: {
              display: "block",
              position: "fixed",
              top: 0,
            },
            banner: {
              display: "block",
              position: "fixed",
              top: `${props.navbarHeight}px`,
            },
          },
          end: {
            navbar: {
              display: "block",
              position: "fixed",
              top: `-${props.navbarHeight}px`,
            },
            banner: {
              display: "block",
              position: "fixed",
              top: 0,
            },
          },
        };
        // add base style
        Object.keys(state).forEach((key) => {
          state[key].navbar.height = props.navbarHeight + "px";
          state[key].banner.height = props.bannerHeight + "px";
        });
        let style = vue.ref(state.start);
        vue.watch(windowY, (newVal) => {
          if (
            windowY.value >
            props.bannerHeight + middleHeight + props.bannerScrollAmount
          ) {
            style.value = state.end;
            return;
          }
          if (windowY.value > props.bannerHeight + middleHeight) {
            style.value = state.middle;
            return;
          }
          if (windowY.value <= props.bannerHeight + middleHeight) {
            style.value = state.start;
            return;
          }
        });
        return { style, banner, middleHeight };
      },
    };

    const _withId = /*#__PURE__*/vue.withScopeId("data-v-4bd752bb");

    vue.pushScopeId("data-v-4bd752bb");
    const _hoisted_1 = { class: "cascade-navbar" };
    vue.popScopeId();

    const render = /*#__PURE__*/_withId((_ctx, _cache, $props, $setup, $data, $options) => {
      return (vue.openBlock(), vue.createBlock("div", _hoisted_1, [
        vue.createVNode("div", {
          ref: "navbar",
          class: "cascade-navbar-top",
          style: $setup.style.navbar
        }, [
          vue.renderSlot(_ctx.$slots, "navbar")
        ], 4 /* STYLE */),
        vue.createVNode("div", {
          style: { marginTop: $setup.style.navbar.height }
        }, null, 4 /* STYLE */),
        vue.createVNode("div", {
          class: "cascade-navbar-middle",
          style: { height: $setup.middleHeight + 'px' }
        }, [
          vue.renderSlot(_ctx.$slots, "middle")
        ], 4 /* STYLE */),
        vue.createVNode("div", {
          ref: "banner",
          class: "cascade-navbar-banner",
          style: $setup.style.banner
        }, [
          vue.renderSlot(_ctx.$slots, "banner")
        ], 4 /* STYLE */)
      ]))
    });

    function styleInject(css, ref) {
      if (ref === void 0) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') {
        return;
      }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z = "\n.cascade-navbar[data-v-4bd752bb] {\r\n  display: block;\r\n  box-sizing: border-box;\n}\n.cascade-navbar-top[data-v-4bd752bb] {\r\n  width: 100%;\r\n  transition: 0.3s top;\r\n  z-index: 10;\n}\n.cascade-navbar-banner[data-v-4bd752bb] {\r\n  width: 100%;\r\n  transition: 0.2s top;\r\n  z-index: 9;\n}\n.cascade-navbar-middle[data-v-4bd752bb] {\r\n  width: 100%;\n}\r\n";
    styleInject(css_248z);

    script.render = render;
    script.__scopeId = "data-v-4bd752bb";
    script.__file = "src/CascadeNavbar.vue";

    // Import vue component

    script.install = function (app) {
      app.component(script.name, script);
    }; // To allow use as module (npm/webpack/etc.) export component

    exports.default = script;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}, Vue));
